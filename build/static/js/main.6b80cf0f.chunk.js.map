{"version":3,"sources":["rools/context.js","rools/operators.js","rools/Field.jsx","rools/Operator.jsx","rools/DatePicker.jsx","rools/Value.jsx","rools/RuleGroup.jsx","rools/UpdateGroup.jsx","rools/UpdateQueryBuilder.jsx","rools/QueryBuilder.jsx","history.js","manage-rule/ManageRule.js","rule-list/RuleList.js","Routes.js","App.js","index.js"],"names":["React","createContext","dispatch","filter","filtersByValue","flattenedFilters","maxLevel","operators","operatorsByType","operatorsByValue","label","value","types","symbol","Field","memo","props","context","useContext","Context","field","id","testId","placeholder","Autocomplete","fullWidth","disableClearable","groupBy","option","group","getOptionLabel","getOptionSelected","options","renderInput","params","TextField","size","variant","style","minWidth","onChange","event","selected","type","operator","length","prevProps","nextProps","dequal","whyDidYouRender","Operator","useStyles","makeStyles","t","clearButton","margin","spacing","clearCell","marginLeft","marginTop","parseDate","date","parseISO","startOfDay","DatePicker","classes","useState","setValue","handleDateChange","useEffect","Grid","container","item","utils","DateFnsUtils","datePickerProps","InputLabelProps","shrink","clearable","getDatePickerProps","className","IconButton","onClick","fontSize","defaultProps","MuiDatePicker","useFormControlLabelStyles","typography","readNumericValue","undefined","supportedTypes","Set","Value","formControlLabel","vtype","customOperators","test","has","customOperator","handleTextFieldChange","target","format","onKeyPress","key","preventDefault","filterSelectedOptions","multiple","openOnFocus","disableCloseOnSelect","limitTags","paddingTop","width","op","includes","map","FormGroup","row","FormControlLabel","control","Radio","checked","color","name","find","Switch","removeIconStyles","removeButton","marginRight","removeIcon","fill","useRuleStyles","marginBottom","valueGridItem","flex","Rule","level","position","rule","combinator","rules","useRuleGroupStyles","actionButton","height","padding","borderLeft","palette","divider","paddingLeft","RuleGroup","combinators","maxLevels","direction","disabled","ToggleButtonGroup","exclusive","ToggleButton","Typography","Button","onDrop","addedIndex","removedIndex","useSetStyles","set","combi","sets","toperator","tfield","tvalue","Array","isArray","useSetGroupStyles","SetGroup","cfield","generateFiltersByValue","filters","forEach","Object","prototype","hasOwnProperty","call","Error","generateFlattenedFilters","list","push","sortFilterGroupsByLabel","sort","a","b","localeCompare","generateOperatorsByType","concat","entries","keys","generateOperatorsByValue","values","findNodeById","node","found","findParentById","parent","resetNodeIds","query","mode","random","Math","formatQuery","JSON","parse","stringify","cloneQuery","isGroupValid","getOwnPropertyNames","isRuleValid","Boolean","trim","verifyFilters","isQueryValid","valid","emptyGroup","reducer","state","action","arrayMove","console","log","UpdateQueryBuilder","useReducer","setContext","sortFilters","Provider","debug","sqlQuery","qr","exp","obj","numCheck","substring","o","conval","val","emptyRule","QueryBuilder","setConditions","newFormatQuery","selectRules","updateRules","updateConditions","newResetNodeIds","ruleQuery","queryJson","history","ManageRule","ruleoptions","defaultRule","ruleId","description","status","version","created_datetime","updated_datetime","activeTabIndex","rowIdParam","URLSearchParams","location","search","rowId","get","this","align","Paper","square","Tabs","indicatorColor","textColor","setState","fetch","method","headers","body","then","res","json","result","prevState","Tab","TabPanel","index","publish","class","selectRule","updateoptions","updateRule","display","overflow","float","paddingRight","fontWeight","insertSql","updateSql","subrule","i","toUpperCase","fields","f","setItem","bottom","zIndex","Component","children","RuleList","config","setConfig","rows","setRows","successAlert","setSuccessAlert","selectedRule","setSelectedRule","columns","headerName","editable","sortable","disableColumnMenu","showColumnRightBorder","disableClickEventBubbling","renderCell","token","identity","Icon","url","fetchConfigData","response1","json1","response","fetchData","sleep","milliseconds","Promise","resolve","setTimeout","publishClick","rools","r","apiInterval","overflowX","paddingBottom","DataGrid","sx","pageSize","checkboxSelection","disableSelectionOnClick","rowsPerPageOptions","components","Toolbar","GridToolbarContainer","GridToolbarColumnsButton","GridToolbarFilterButton","GridToolbarDensitySelector","GridToolbarExport","startIcon","GridToolbar","printOptions","pageStyle","initialState","columnVisibilityModel","Snackbar","open","anchorOrigin","autoHideDuration","onClose","Alert","severity","Routes","path","exact","component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6b80cf0f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default React.createContext({\r\n    dispatch: null,\r\n    filter: [],\r\n    filtersByValue: {},\r\n    flattenedFilters: [],\r\n    maxLevel: null,\r\n    operators: [],\r\n    operatorsByType: {},\r\n    operatorsByValue: {},\r\n});\r\n","const operators = [\r\n    {\r\n        label: \"equal to\",\r\n        value: \"equal to\",\r\n        types: [\"date\", \"integer\", \"number\", \"radio\", \"select\", \"switch\", \"text\"],\r\n        symbol: \"=\",\r\n    },\r\n    {\r\n        label: \"not equal to\",\r\n        value: \"not equal\",\r\n        types: [\"date\", \"integer\", \"number\", \"radio\", \"select\", \"switch\", \"text\"],\r\n        symbol: \"<>\",\r\n    },\r\n    {\r\n        label: \"contains\",\r\n        value: \"contains\",\r\n        types: [\"text\"],\r\n        symbol: \"like\",\r\n    },\r\n    {\r\n        label: \"does not contain\",\r\n        value: \"not contains\",\r\n        types: [\"text\"],\r\n        symbol: \"not like\",\r\n    },\r\n    {\r\n        label: \"begins with\",\r\n        value: \"begins with\",\r\n        types: [\"text\"],\r\n        symbol: \"like\",\r\n    },\r\n    {\r\n        label: \"ends with\",\r\n        value: \"ends with\",\r\n        types: [\"text\"],\r\n        symbol: \"like\",\r\n    },\r\n    {\r\n        label: \"less than\",\r\n        value: \"less\",\r\n        types: [\"number\", \"integer\"],\r\n        symbol: \"<\",\r\n    },\r\n    {\r\n        label: \"greater than\",\r\n        value: \"greater\",\r\n        types: [\"number\", \"integer\"],\r\n        symbol: \">\",\r\n    },\r\n    {\r\n        label: \"less or equal to\",\r\n        value: \"less equal\",\r\n        types: [\"number\", \"integer\"],\r\n        symbol: \"<=\",\r\n    },\r\n    {\r\n        label: \"greater or equal to\",\r\n        value: \"greater equal\",\r\n        types: [\"number\", \"integer\"],\r\n        symbol: \">=\",\r\n    },\r\n    {\r\n        label: \"before than\",\r\n        value: \"before\",\r\n        types: [\"date\"],\r\n        symbol: \"<\",\r\n    },\r\n    {\r\n        label: \"after than\",\r\n        value: \"after\",\r\n        types: [\"date\"],\r\n        symbol: \">\",\r\n    },\r\n    {\r\n        label: \"before or equal to\",\r\n        value: \"before_equal\",\r\n        types: [\"date\"],\r\n        symbol: \"<=\",\r\n    },\r\n    {\r\n        label: \"after or equal to\",\r\n        value: \"after_equal\",\r\n        types: [\"date\"],\r\n        symbol: \">=\",\r\n    },\r\n    {\r\n        label: \"is\",\r\n        value: \"in\",\r\n        types: [\"multiselect\"],\r\n        symbol: \"in\",\r\n    },\r\n    {\r\n        label: \"is not\",\r\n        value: \"not in\",\r\n        types: [\"multiselect\"],\r\n        symbol: \"not in\",\r\n    },\r\n    {\r\n        label: \"is null\",\r\n        value: \"is null\",\r\n        types: [\"date\", \"integer\", \"number\", \"multiselect\", \"radio\", \"select\", \"switch\", \"text\"],\r\n        symbol: \"is null\",\r\n    },\r\n    {\r\n        label: \"as null\",\r\n        value: \"as null\",\r\n        types: [\"update\"],\r\n        symbol: \"=\",\r\n    },\r\n    {\r\n        label: \"is not null\",\r\n        value: \"not null\",\r\n        types: [\"date\", \"integer\", \"number\", \"multiselect\", \"radio\", \"select\", \"switch\", \"text\"],\r\n        symbol: \"is not null\",\r\n    },\r\n    {\r\n        label: \"=\",\r\n        value: \"equal to field\",\r\n        types: [\"update\"],\r\n        symbol: \"=\",\r\n    },\r\n    {\r\n        label: \"Left Substring\",\r\n        value: \"left substring\",\r\n        types: [\"substring\"],\r\n        symbol: \"=\",\r\n    },\r\n    {\r\n        label: \"Right Substring\",\r\n        value: \"right substring\",\r\n        types: [\"substring\"],\r\n        symbol: \"=\",\r\n    },\r\n    {\r\n        label: \"Substring\",\r\n        value: \"substring\",\r\n        types: [\"substring\"],\r\n        symbol: \"=\",\r\n    },\r\n    {\r\n        label: \"Prefix\",\r\n        value: \"prefix\",\r\n        types: [\"prefix\"],\r\n        symbol: \"||\",\r\n    },\r\n    {\r\n        label: \"Suffix\",\r\n        value: \"suffix\",\r\n        types: [\"suffix\"],\r\n        symbol: \"||\",\r\n    },\r\n];\r\n\r\nexport default operators;\r\n","import { TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { dequal } from \"dequal\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nimport Context from \"./context\";\r\n\r\nconst Field = React.memo(\r\n    (props) => {\r\n        const context = React.useContext(Context);\r\n        \r\n        const { field, id, testId, placeholder } = props;\r\n\r\n        const { dispatch, filtersByValue, flattenedFilters, operatorsByType } = context;\r\n        const filter = field ? filtersByValue[field] : null;\r\n\r\n        return (\r\n            <Autocomplete\r\n                fullWidth\r\n                data-testid={`field-${testId}`}\r\n                disableClearable={true}\r\n                groupBy={(option) => option.group}\r\n                getOptionLabel={(option) => option.label}\r\n                getOptionSelected={(option, value) => {\r\n                    return option.value === value.value;\r\n                }}\r\n                options={flattenedFilters}\r\n                renderInput={(params) => <TextField {...params} placeholder={placeholder} size=\"small\" variant=\"outlined\" />}\r\n                style={{ minWidth: 250 }}\r\n                value={filter}\r\n                onChange={(event, selected) => {\r\n                    const value = selected ? selected.value : null;\r\n                    const { type } = filtersByValue[value];\r\n                    const operators = operatorsByType[type];\r\n                    const operator = operators?.length > 0 ? operators[0].value : null;\r\n                    dispatch({ type: \"set-field\", id, operator, value });\r\n                }}\r\n            />\r\n        );\r\n    },\r\n    (prevProps, nextProps) => {\r\n        // Skip re-rendering if the field didn't change.\r\n        return dequal(prevProps, nextProps);\r\n    }\r\n);\r\n\r\nField.propTypes = {\r\n    field: PropTypes.string,\r\n    id: PropTypes.number.isRequired,\r\n    testId: PropTypes.string.isRequired,\r\n    placeholder: PropTypes.string,\r\n};\r\n\r\nField.whyDidYouRender = false;\r\n\r\nexport default Field;\r\n","import { TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { dequal } from \"dequal\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nimport Context from \"./context\";\r\n\r\nconst Operator = React.memo(\r\n    (props) => {\r\n        const context = React.useContext(Context);\r\n        const { field, id, operator, testId } = props;\r\n\r\n        const { dispatch, filtersByValue, operatorsByType, operatorsByValue } = context;\r\n\r\n        const filter = field ? filtersByValue[field] : null;\r\n        const options = filter ? operatorsByType[filter.type] : [];\r\n        const value = operator ? operatorsByValue[operator] : null;\r\n\r\n        return (\r\n            <Autocomplete\r\n                fullWidth\r\n                data-testid={`operator-${testId}`}\r\n                disableClearable={true}\r\n                getOptionLabel={(option) => option.label}\r\n                getOptionSelected={(option, value) => option.value === value.value}\r\n                options={options}\r\n                renderInput={(params) => (\r\n                    <TextField {...params} placeholder=\"Operator\" size=\"small\" variant=\"outlined\" />\r\n                )}\r\n                style={{ minWidth: 200 }}\r\n                value={value}\r\n                onChange={(event, selected) => {\r\n                    const { value } = selected;\r\n                    dispatch({ type: \"set-operator\", id, value });\r\n                }}\r\n            />\r\n        );\r\n    },\r\n    (prevProps, nextProps) => {\r\n        // Skip re-rendering if the operator didn't change.\r\n        return dequal(prevProps, nextProps);\r\n    }\r\n);\r\n\r\nOperator.propTypes = {\r\n    field: PropTypes.string,\r\n    id: PropTypes.number.isRequired,\r\n    operator: PropTypes.string,\r\n    testId: PropTypes.string.isRequired,\r\n};\r\n\r\nOperator.whyDidYouRender = false;\r\n\r\nexport default Operator;\r\n","import DateFnsUtils from \"@date-io/date-fns\";\r\nimport { Grid, IconButton } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport { DatePicker as MuiDatePicker, MuiPickersUtilsProvider } from \"@material-ui/pickers\";\r\nimport { parseISO, startOfDay } from \"date-fns\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nconst useStyles = makeStyles((t) => ({\r\n    clearButton: {\r\n        margin: t.spacing(1),\r\n    },\r\n    clearCell: {\r\n        marginLeft: -t.spacing(0.5),\r\n        marginTop: (props) => (props.label ? t.spacing(1.5) : \"none\"),\r\n    },\r\n}));\r\n\r\nfunction parseDate(date) {\r\n    if (!date) {\r\n        return null;\r\n    }\r\n    if (typeof date === \"string\") {\r\n        date = parseISO(date);\r\n    }\r\n    date = startOfDay(date);\r\n    return date;\r\n}\r\n\r\nconst DatePicker = (props) => {\r\n    const classes = useStyles(props);\r\n\r\n    const [value, setValue] = React.useState(parseDate(props.value));\r\n\r\n    React.useEffect(() => {\r\n        const date = parseDate(props.value);\r\n        setValue(date);\r\n    }, [props.value]);\r\n\r\n    function handleDateChange(date) {\r\n        date = parseDate(date);\r\n        setValue(date);\r\n        if (props.onChange) {\r\n            props.onChange(date);\r\n        }\r\n    }\r\n\r\n    /*\r\n     * https://material-ui-pickers.dev/api/DatePicker\r\n     */\r\n    function getDatePickerProps() {\r\n        const datePickerProps = {\r\n            ...props,\r\n            InputLabelProps: {\r\n                ...props.InputLabelProps,\r\n                shrink: true,\r\n            },\r\n            variant: \"inline\",\r\n        };\r\n        delete datePickerProps.clearable; // not supported by the inline variant\r\n        return datePickerProps;\r\n    }\r\n    return (\r\n        <Grid container>\r\n            <Grid item>\r\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                    <MuiDatePicker {...getDatePickerProps()} value={value} onChange={handleDateChange} />\r\n                </MuiPickersUtilsProvider>\r\n            </Grid>\r\n            {props.clearable && (\r\n                <Grid item className={classes.clearCell}>\r\n                    <IconButton\r\n                        aria-label=\"clear\"\r\n                        className={classes.clearButton}\r\n                        data-testid={`${props[\"data-testid\"]}-clear`}\r\n                        size=\"small\"\r\n                        onClick={() => handleDateChange(null)}\r\n                    >\r\n                        <CloseIcon fontSize=\"inherit\" />\r\n                    </IconButton>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    );\r\n};\r\n\r\nDatePicker.defaultProps = {\r\n    ...MuiDatePicker.defaultProps,\r\n    \"autoOk\": true,\r\n    \"data-testid\": \"date-picker\",\r\n    \"format\": \"PPP\",\r\n};\r\n\r\nDatePicker.propTypes = {\r\n    ...MuiDatePicker.propTypes,\r\n    \"data-testid\": PropTypes.string,\r\n    \"clearable\": PropTypes.bool,\r\n};\r\n\r\nexport default DatePicker;\r\n","import { FormControlLabel, FormGroup, Radio, Switch, TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\nimport { format } from \"date-fns\";\r\nimport { dequal } from \"dequal\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nimport Context from \"./context\";\r\nimport DatePicker from \"./DatePicker\";\r\n\r\nconst useFormControlLabelStyles = makeStyles((t) => {\r\n    return {\r\n        label: {\r\n            fontSize: t.typography.fontSize,\r\n        },\r\n    };\r\n});\r\n\r\nconst readNumericValue = (value) => {\r\n    return value !== null && value !== undefined ? value : \"\";\r\n};\r\n\r\nconst supportedTypes = new Set([\"date\", \"integer\", \"multiselect\", \"number\", \"radio\", \"select\", \"switch\", \"text\"]);\r\n\r\nconst Value = React.memo(\r\n    (props) => {\r\n        const classes = {\r\n            formControlLabel: useFormControlLabelStyles(),\r\n        };\r\n        const context = React.useContext(Context);\r\n\r\n        const { field, id, operator, value, vtype } = props;\r\n        const { customOperators, dispatch, filtersByValue } = context;\r\n\r\n        if (/null/i.test(operator)) {\r\n            return <span />;\r\n        }\r\n        const testId = `value-${props.testId}`;\r\n        const filter = field ? { ...filtersByValue[field] } : { type: null };\r\n\r\n        if (!supportedTypes.has(filter.type)) {\r\n            const customOperator = customOperators[filter.type];\r\n            filter.type = customOperator?.type;\r\n        }\r\n        const handleTextFieldChange = (event) => {\r\n            dispatch({ type: \"set-value\", id, value: event.target.value, vtype: vtype });\r\n        };\r\n        switch (filter.type) {\r\n            case \"date\":\r\n                return (\r\n                    <DatePicker\r\n                        clearable\r\n                        data-testid={testId}\r\n                        value={value || null}\r\n                        onChange={(date) => {\r\n                            const value = date ? format(date, \"yyyy-MM-dd\") : null;\r\n                            dispatch({ type: \"set-value\", id, value });\r\n                        }}\r\n                    />\r\n                );\r\n            case \"integer\":\r\n                return (\r\n                    <TextField\r\n                        data-testid={testId}\r\n                        type=\"number\"\r\n                        value={readNumericValue(value)}\r\n                        onChange={handleTextFieldChange}\r\n                        onKeyPress={(event) => {\r\n                            if (/\\.|,/.test(event.key)) {\r\n                                event.preventDefault();\r\n                            }\r\n                        }}\r\n                    />\r\n                );\r\n            case \"multiselect\":\r\n                return (\r\n                    <Autocomplete\r\n                        filterSelectedOptions\r\n                        fullWidth\r\n                        multiple\r\n                        openOnFocus\r\n                        data-testid={testId}\r\n                        disableCloseOnSelect={true}\r\n                        getOptionLabel={(option) => option.label}\r\n                        getOptionSelected={(option, value) => option.value === value.value}\r\n                        limitTags={-1}\r\n                        options={filter.options} \r\n                        renderInput={(params) => <TextField {...params}  variant=\"outlined\" size=\"small\"/>}\r\n                        size=\"small\"\r\n                        style={{ paddingTop: 4, width: \"auto\" }}\r\n                        value={filter.options.filter((op) => value?.includes(op.value))}\r\n                        onChange={(event, selected) => {\r\n                            const value = (selected || []).map((item) => item.value);\r\n                            dispatch({ type: \"set-value\", id, value });\r\n                        }}\r\n                    />\r\n                );\r\n            case \"number\":\r\n                return (\r\n                    <TextField\r\n                        data-testid={testId}\r\n                        type=\"number\"\r\n                        value={readNumericValue(value)}\r\n                        onChange={handleTextFieldChange}\r\n                    />\r\n                );\r\n            case \"radio\":\r\n                return (\r\n                    <FormGroup row>\r\n                        <FormControlLabel\r\n                            classes={classes.formControlLabel}\r\n                            control={\r\n                                <Radio\r\n                                    checked={value === true}\r\n                                    color=\"primary\"\r\n                                    data-testid={`${testId}-true`}\r\n                                    name={testId}\r\n                                    value={value}\r\n                                    onChange={() => {\r\n                                        dispatch({ type: \"set-value\", id, value: true });\r\n                                    }}\r\n                                />\r\n                            }\r\n                            label=\"True\"\r\n                            value={value}\r\n                        />\r\n                        <FormControlLabel\r\n                            classes={classes.formControlLabel}\r\n                            control={\r\n                                <Radio\r\n                                    checked={value === false}\r\n                                    color=\"primary\"\r\n                                    data-testid={`${testId}-false`}\r\n                                    name={testId}\r\n                                    value={value}\r\n                                    onChange={() => {\r\n                                        dispatch({ type: \"set-value\", id, value: false });\r\n                                    }}\r\n                                />\r\n                            }\r\n                            label=\"False\"\r\n                            value={value}\r\n                        />\r\n                    </FormGroup>\r\n                );\r\n            case \"select\":\r\n                return (\r\n                    <Autocomplete\r\n                        data-testid={testId}\r\n                        getOptionLabel={(option) => option.label}\r\n                        getOptionSelected={(option, value) => option.value === value.value}\r\n                        options={filter.options}\r\n                        renderInput={(params) => <TextField {...params} variant=\"outlined\" size=\"small\" />}\r\n                        style={{ width: \"100%\" }}\r\n                        value={filter.options.find((op) => value[0] === op.value)} //support the values as array\r\n                        onChange={(event, selected) => {\r\n                            const value = selected ? selected.value : null;\r\n                            dispatch({ type: \"set-value\", id, value });\r\n                        }}\r\n                    />\r\n                );\r\n            case \"switch\":\r\n                return (\r\n                    <Switch\r\n                        color=\"primary\"\r\n                        data-testid={testId}\r\n                        checked={value || false}\r\n                        onChange={(event) => {\r\n                            const value = event.target.checked;\r\n                            dispatch({ type: \"set-value\", id, value });\r\n                        }}\r\n                    />\r\n                );\r\n            case \"substring\":\r\n            return (\r\n                <TextField\r\n                    data-testid={testId}\r\n                    type=\"number\"\r\n                    value={readNumericValue(value)}\r\n                    onChange={handleTextFieldChange}\r\n                    variant=\"outlined\" \r\n                    size=\"small\"\r\n                />\r\n            );\r\n            default:\r\n                return (\r\n                    <TextField fullWidth data-testid={testId} value={value || \"\"} onChange={handleTextFieldChange} vtype={vtype} variant=\"outlined\" size=\"small\"/>\r\n                );\r\n        }\r\n    },\r\n    (prevProps, nextProps) => {\r\n        // Skip re-rendering if the value didn't change.\r\n        return dequal(prevProps, nextProps);\r\n    }\r\n);\r\n\r\nValue.propTypes = {\r\n    field: PropTypes.string,\r\n    id: PropTypes.number.isRequired,\r\n    operator: PropTypes.string,\r\n    testId: PropTypes.string.isRequired,\r\n    value: PropTypes.any,\r\n    vtype: PropTypes.string,\r\n};\r\n\r\nValue.whyDidYouRender = false;\r\n\r\nexport default Value;\r\n","import { Button, Grid, IconButton, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AddCircleOutline as AddIcon, RemoveCircleOutline as RemoveIcon } from \"@material-ui/icons\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { Draggable, Container as DraggableContainer } from \"react-smooth-dnd\";\r\n\r\nimport Context from \"./context\";\r\nimport Field from \"./Field\";\r\nimport Operator from \"./Operator\";\r\nimport Value from \"./Value\";\r\n\r\nconst removeIconStyles = (t) => ({\r\n    removeButton: {\r\n        marginRight: t.spacing(-1),\r\n        marginTop: t.spacing(0.75),\r\n    },\r\n    removeIcon: {\r\n        fill: \"#f50057\",\r\n    },\r\n});\r\n\r\nconst useRuleStyles = makeStyles((t) => {\r\n    return {\r\n        ...removeIconStyles(t),\r\n        container: {\r\n            \"& > div\": {\r\n                marginBottom: t.spacing(0.5),\r\n                marginTop: t.spacing(0.5),\r\n            },\r\n            \"cursor\": \"move\",\r\n        },\r\n        valueGridItem: {\r\n            flex: \"auto\",\r\n        },\r\n    };\r\n});\r\n\r\nconst Rule = (props) => {\r\n    const classes = useRuleStyles();\r\n    const context = React.useContext(Context);\r\n\r\n    const { id, level, position, rule } = props;\r\n    const { combinator, field, operator, rules, value } = rule;\r\n\r\n    const { dispatch } = context;\r\n\r\n    const testId = `${level}-${position}`;\r\n\r\n    return combinator ? (\r\n        <RuleGroup combinator={combinator} id={id} level={level + 1} rules={rules} />\r\n    ) : (\r\n        <Grid container className={classes.container} data-testid={`rule-${testId}`} spacing={2}>\r\n            <Grid item>\r\n                <IconButton\r\n                    className={classes.removeButton}\r\n                    data-testid={`rule-${testId}-remove`}\r\n                    size=\"small\"\r\n                    onClick={() => {\r\n                        dispatch({ type: \"remove-node\", id });\r\n                    }}\r\n                >\r\n                    <RemoveIcon className={classes.removeIcon} />\r\n                </IconButton>\r\n            </Grid>\r\n            <Grid item>\r\n                <Field field={field} id={id} testId={testId} placeholder=\"Field\" />\r\n            </Grid>\r\n            <Grid item>\r\n                <Operator field={field} id={id} operator={operator} testId={testId} />\r\n            </Grid>\r\n            <Grid item className={classes.valueGridItem}>\r\n                <Value field={field} id={id} operator={operator} testId={testId} value={value} />\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n};\r\n\r\nRule.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    level: PropTypes.number.isRequired,\r\n    position: PropTypes.number.isRequired,\r\n    rule: PropTypes.object.isRequired,\r\n};\r\n\r\nconst useRuleGroupStyles = makeStyles((t) => ({\r\n    actionButton: {\r\n        \"& svg\": {\r\n            marginRight: t.spacing(0.5),\r\n            marginTop: t.spacing(0.25),\r\n        },\r\n        \"textTransform\": \"none\",\r\n    },\r\n    combinator: {\r\n        height: 36,\r\n        padding: t.spacing(0, 1.5),\r\n    },\r\n    group: {\r\n        borderLeft: (props) => (props.level > 0 ? `2px solid ${t.palette.divider}` : \"none\"),\r\n        paddingLeft: t.spacing(1.5),\r\n        marginBottom: t.spacing(0.5),\r\n        marginTop: (props) => (props.level > 0 ? t.spacing(0.5) : \"none\"),\r\n    },\r\n    ...removeIconStyles(t),\r\n}));\r\n\r\nconst RuleGroup = (props) => {\r\n    const classes = useRuleGroupStyles(props);\r\n    const context = React.useContext(Context);\r\n\r\n    const { combinator, combinators, id, level, rules } = props;\r\n    const testId = `group-${level}`;\r\n\r\n    const { dispatch, maxLevels } = context;\r\n\r\n    return level <= maxLevels ? (\r\n        <Grid container className={classes.group} data-testid={testId} direction=\"column\" spacing={1}>\r\n            <Grid item>            \r\n                <Grid container spacing={2}>\r\n                    <Grid item>\r\n                        <IconButton\r\n                            className={classes.removeButton}\r\n                            data-testid={`${testId}-remove`}\r\n                            disabled={level === 0}\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                dispatch({ type: \"remove-node\", id });\r\n                            }}\r\n                        >\r\n                            <RemoveIcon className={level > 0 ? classes.removeIcon : null} />\r\n                        </IconButton>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <ToggleButtonGroup\r\n                            exclusive\r\n                            size=\"small\"\r\n                            value={combinator}\r\n                            onChange={(event, value) => {\r\n                                if (value) {\r\n                                    dispatch({ type: \"set-combinator\", id, value });\r\n                                }\r\n                            }}\r\n                        >\r\n                            {combinators.map((item) => (\r\n                                <ToggleButton\r\n                                    key={item.value}\r\n                                    data-testid={`${testId}-combinator-${item.value}`}\r\n                                    className={classes.combinator}\r\n                                    value={item.value}\r\n                                >\r\n                                    <Typography variant=\"body2\">{item.label}</Typography>\r\n                                </ToggleButton>\r\n                            ))}\r\n                        </ToggleButtonGroup>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Button\r\n                            className={classes.actionButton}\r\n                            color=\"primary\"\r\n                            data-testid={`${testId}-add-rule`}\r\n                            onClick={() => {\r\n                                dispatch({ type: \"add-rule\", id });\r\n                            }}\r\n                        >\r\n                            <AddIcon />\r\n                            Condition\r\n                        </Button>\r\n                    </Grid>\r\n                    {level < maxLevels && (\r\n                        <Grid item>\r\n                            <Button\r\n                                className={classes.actionButton}\r\n                                color=\"primary\"\r\n                                data-testid={`${testId}-add-group`}\r\n                                onClick={() => {\r\n                                    dispatch({ type: \"add-group\", id });\r\n                                }}\r\n                            >\r\n                                <AddIcon />\r\n                                Sub-condition\r\n                            </Button>\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n            {rules?.length > 0 && (\r\n                <Grid item>\r\n                    <DraggableContainer\r\n                        onDrop={({ addedIndex, removedIndex }) => {\r\n                            dispatch({ type: \"move-rule\", addedIndex, id, removedIndex });\r\n                        }}\r\n                    >\r\n                        {rules.map((rule, position) => (\r\n                            <Draggable key={rule.id}>\r\n                                <Rule id={rule.id} level={level} position={position} rule={rule} />\r\n                            </Draggable>\r\n                        ))}\r\n                    </DraggableContainer>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    ) : (\r\n        <span />\r\n    );\r\n};\r\n\r\nRuleGroup.defaultProps = {\r\n    combinator: \"and\",\r\n    combinators: [\r\n        { label: \"AND\", value: \"and\" },\r\n        { label: \"OR\", value: \"or\" },\r\n    ],\r\n    rules: [],\r\n};\r\n\r\nRuleGroup.propTypes = {\r\n    combinator: PropTypes.string,\r\n    combinators: PropTypes.array,\r\n    id: PropTypes.number.isRequired,\r\n    level: PropTypes.number.isRequired,\r\n    rules: PropTypes.array,\r\n};\r\n\r\nexport default RuleGroup;\r\n","import { Button, Grid, IconButton, Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AddCircleOutline as AddIcon, RemoveCircleOutline as RemoveIcon } from \"@material-ui/icons\";\r\nimport { ToggleButton, ToggleButtonGroup } from \"@material-ui/lab\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { Draggable, Container as DraggableContainer } from \"react-smooth-dnd\";\r\n\r\nimport Context from \"./context\";\r\nimport Field from \"./Field\";\r\nimport Operator from \"./Operator\";\r\nimport Value from \"./Value\";\r\n\r\nconst removeIconStyles = (t) => ({\r\n    removeButton: {\r\n        marginRight: t.spacing(-1),\r\n        marginTop: t.spacing(0.75),\r\n    },\r\n    removeIcon: {\r\n        fill: \"#f50057\",\r\n    },\r\n});\r\n\r\nconst useSetStyles = makeStyles((t) => {\r\n    return {\r\n        ...removeIconStyles(t),\r\n        container: {\r\n            \"& > div\": {\r\n                marginBottom: t.spacing(0.5),\r\n                marginTop: t.spacing(0.5),\r\n            },\r\n            \"cursor\": \"move\",\r\n        },\r\n        valueGridItem: {\r\n            flex: \"auto\",\r\n        },\r\n    };\r\n});\r\n\r\nconst Set = (props) => {\r\n    const classes = useSetStyles();\r\n    const context = React.useContext(Context);\r\n\r\n    const { id, level, position, set, combi } = props;\r\n    const { combinator, field, operator, sets, value, tfield, toperator, tvalue } = set;\r\n\r\n    const { dispatch } = context;\r\n\r\n    const testId = `${level}-${position}`;\r\n    const whenCombi = [{label: \"WHEN\", value: \"when\"}];\r\n\r\n    return combinator ? (\r\n        <>\r\n        <SetGroup combinator={combinator} id={id} level={level + 1} sets={sets} />\r\n        </>\r\n    ) : (\r\n        <Grid container className={classes.container} data-testid={`set-${testId}`} spacing={2}>\r\n            <Grid item>\r\n                <IconButton\r\n                    className={classes.removeButton}\r\n                    data-testid={`set-${testId}-remove`}\r\n                    size=\"small\"\r\n                    onClick={() => {\r\n                        dispatch({ type: \"remove-node\", id });\r\n                    }}\r\n                >\r\n                    <RemoveIcon className={classes.removeIcon} />\r\n                </IconButton>\r\n            </Grid>\r\n            {combi === \"case\" ? (\r\n            <>            \r\n            <Grid item>\r\n                <ToggleButtonGroup\r\n                            exclusive\r\n                            size=\"small\"\r\n                            value={\"when\"}\r\n                            onChange={(event, value) => {\r\n                                if (value) {\r\n                                    dispatch({ type: \"set-combinator\", id, value });\r\n                                }\r\n                            }}\r\n                        >\r\n                            {whenCombi.map((item) => (\r\n                                <ToggleButton\r\n                                    key={item.value}\r\n                                    data-testid={`${testId}-combinator-${item.value}`}\r\n                                    className={classes.combinator}\r\n                                    value={item.value}\r\n                                >\r\n                                    <Typography variant=\"body2\">{item.label}</Typography>\r\n                                </ToggleButton>\r\n                            ))}\r\n                        </ToggleButtonGroup>                    \r\n            </Grid>\r\n            </>\r\n                ): \"\"}\r\n            <Grid item>\r\n                <Field field={field} id={id} testId={testId} placeholder=\"Field\"/>\r\n            </Grid>\r\n            <Grid item>\r\n                <Operator field={field} id={id} operator={operator} testId={testId} />\r\n            </Grid>\r\n            <Grid item className={classes.valueGridItem}>\r\n                <Value field={field} id={id} operator={operator} testId={testId} value={Array.isArray(value)? value[0]: value} vtype=\"field\"/>\r\n            </Grid>\r\n            \r\n            {combi === \"case\" ? (\r\n            <>\r\n           \r\n            \r\n            <Grid item>\r\n                <ToggleButtonGroup\r\n                            exclusive\r\n                            size=\"small\"\r\n                            value={\"then\"}\r\n                            onChange={(event, value) => {\r\n                                if (value) {\r\n                                    dispatch({ type: \"set-combinator\", id, value });\r\n                                }\r\n                            }}\r\n                        >\r\n                            {[{label: \"THEN\", value: \"then\"}].map((item) => (\r\n                                <ToggleButton\r\n                                    key={item.value}\r\n                                    data-testid={`${testId}-combinator-${item.value}`}\r\n                                    className={classes.combinator}\r\n                                    value={item.value}\r\n                                >\r\n                                    <Typography variant=\"body2\">{item.label}</Typography>\r\n                                </ToggleButton>\r\n                            ))}\r\n                        </ToggleButtonGroup>                    \r\n            </Grid>\r\n            <Grid item className={classes.valueGridItem}>\r\n                <Value field={field} id={id} operator={toperator} testId={testId} value={value[1]} vtype=\"case\"/>\r\n            </Grid>\r\n            </>\r\n            ): \"\"}\r\n            \r\n        </Grid>\r\n    );\r\n};\r\n\r\nSet.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    level: PropTypes.number.isRequired,\r\n    position: PropTypes.number.isRequired,\r\n    set: PropTypes.object.isRequired,\r\n};\r\n\r\n//*******************************/\r\n\r\n\r\n//*******************************************/\r\n\r\n\r\n\r\n\r\nconst useSetGroupStyles = makeStyles((t) => ({\r\n    actionButton: {\r\n        \"& svg\": {\r\n            marginRight: t.spacing(0.5),\r\n            marginTop: t.spacing(0.25),\r\n        },\r\n        \"textTransform\": \"none\",\r\n    },\r\n    combinator: {\r\n        height: 36,\r\n        padding: t.spacing(0, 1.5),\r\n    },\r\n    group: {\r\n        borderLeft: (props) => (props.level > 0 ? `2px solid ${t.palette.divider}` : \"none\"),\r\n        paddingLeft: t.spacing(1.5),\r\n        marginBottom: t.spacing(0.5),\r\n        marginTop: (props) => (props.level > 0 ? t.spacing(0.5) : \"none\"),\r\n    },\r\n    ...removeIconStyles(t),\r\n}));\r\n\r\nconst SetGroup = (props) => {\r\n    const classes = useSetGroupStyles(props);\r\n    const context = React.useContext(Context);\r\n\r\n    const { combinator, combinators, id, level, sets, cfield } = props;\r\n    const testId = `group-${level}`;\r\n\r\n    const { dispatch, maxLevels } = context;\r\n\r\n    return level <= maxLevels ? (\r\n        <Grid container className={classes.group} data-testid={testId} direction=\"column\" spacing={1}>\r\n            <Grid item>            \r\n                <Grid container spacing={2}>\r\n                    <Grid item>\r\n                        <IconButton\r\n                            className={classes.removeButton}\r\n                            data-testid={`${testId}-remove`}\r\n                            disabled={level === 0}\r\n                            size=\"small\"\r\n                            onClick={() => {\r\n                                dispatch({ type: \"remove-node\", id });\r\n                            }}\r\n                        >\r\n                            <RemoveIcon className={level > 0 ? classes.removeIcon : null} />\r\n                        </IconButton>\r\n                    </Grid>\r\n                    {combinator === \"case\" ? (\r\n                    <Grid item>\r\n                        <Field field={sets[0].field} id={id} testId={testId} placeholder=\"Case\" />\r\n                    </Grid>\r\n                    ): \"\"}\r\n                    <Grid item>\r\n                        <Button\r\n                            className={classes.actionButton}\r\n                            color=\"primary\"\r\n                            data-testid={`${testId}-add-set`}\r\n                            onClick={() => {\r\n                                dispatch({ type: \"add-set\", id });\r\n                            }}\r\n                        >\r\n                            <AddIcon />\r\n                            Field\r\n                        </Button>\r\n                    </Grid>\r\n                    {level < maxLevels && (\r\n                        <Grid item>\r\n                            <Button\r\n                                className={classes.actionButton}\r\n                                color=\"primary\"\r\n                                data-testid={`${testId}-add-group`}\r\n                                onClick={() => {\r\n                                    dispatch({ type: \"add-group\", id });\r\n                                }}\r\n                            >\r\n                                <AddIcon />\r\n                                Case\r\n                            </Button>\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Grid>\r\n            {sets?.length > 0 && (\r\n                <Grid item>\r\n                    <DraggableContainer\r\n                        onDrop={({ addedIndex, removedIndex }) => {\r\n                            dispatch({ type: \"move-set\", addedIndex, id, removedIndex });\r\n                        }}\r\n                    >\r\n                        {sets.map((set, position) => (\r\n                            <Draggable key={set.id}>\r\n                                <Set id={set.id} level={level} position={position} set={set} combi={combinator}/>\r\n                            </Draggable>\r\n                        ))}\r\n                    </DraggableContainer>\r\n                </Grid>\r\n            )}\r\n        </Grid>\r\n    ) : (\r\n        <span />\r\n    );\r\n};\r\n\r\nSetGroup.defaultProps = {\r\n    combinator: \"case\",\r\n    combinators: [\r\n        { label: \"SET\", value: \"set\" },\r\n        { label: \"CASE\", value: \"case\" },\r\n    ],\r\n    sets: [],\r\n};\r\n\r\nSetGroup.propTypes = {\r\n    combinator: PropTypes.string,\r\n    combinators: PropTypes.array,\r\n    id: PropTypes.number.isRequired,\r\n    level: PropTypes.number.isRequired,\r\n    sets: PropTypes.array,\r\n    cfield: PropTypes.string,\r\n};\r\n\r\nexport default SetGroup;\r\n","import arrayMove from \"array-move\";\r\nimport { dequal } from \"dequal\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nimport Context from \"./context\";\r\nimport operators from \"./operators\";\r\nimport SetGroup from \"./UpdateGroup\";\r\n\r\n/**\r\n * Allows retrieving filters by value, in O(1) time.\r\n *\r\n * @param {Array} filters The data descriptions.\r\n * @returns {Object} Filters map.\r\n */\r\nexport function generateFiltersByValue(filters) {\r\n    const map = {};\r\n    filters.forEach((filter) => {\r\n        const options = filter.options || [];\r\n        options.forEach((option) => {\r\n            const { value } = option;\r\n            if (Object.prototype.hasOwnProperty.call(map, value)) {\r\n                throw new Error(`Duplicated filter: ${value}`);\r\n            }\r\n            map[value] = { ...option };\r\n        });\r\n    });\r\n    return map;\r\n}\r\n\r\n/**\r\n * Flattens filters for autocomplete fields.\r\n *\r\n * @param {Array} filters The data descriptions.\r\n * @returns {List} Filters list.\r\n */\r\nexport function generateFlattenedFilters(filters) {\r\n    const list = [];\r\n    filters.forEach((filter) => {\r\n        filter.options.forEach((option) => {\r\n            list.push({\r\n                group: filter.label,\r\n                ...option,\r\n            });\r\n        });\r\n    });\r\n    return list;\r\n}\r\n\r\n/**\r\n * Sorts filters within their own groups.\r\n *\r\n * @param {Array} filters The data descriptions.\r\n * @returns {Array} The sorted filters.\r\n */\r\nexport function sortFilterGroupsByLabel(filters) {\r\n    filters.forEach((filter) => {\r\n        filter.options = filter.options.sort((a, b) => a.label.localeCompare(b.label));\r\n    });\r\n    return filters;\r\n}\r\n\r\n/**\r\n * Allows retrieving operators by type, in O(1) time.\r\n *\r\n * @param {Array} operators cf. `operators.js`.\r\n * @param {Object} customOperators Custom operators to be used, if any.\r\n * @returns {Object} Operators map.\r\n */\r\nexport function generateOperatorsByType(operators, customOperators) {\r\n    const map = {};\r\n    const types = [...new Set([].concat(...operators.map((operator) => operator.types)))].sort();\r\n\r\n    types.forEach((type) => {\r\n        if (!Object.prototype.hasOwnProperty.call(map, type)) {\r\n            map[type] = [];\r\n        }\r\n        operators.forEach((operator) => {\r\n            if (operator.types.includes(type)) {\r\n                map[type].push({\r\n                    label: operator.label,\r\n                    value: operator.value,\r\n                });\r\n            }\r\n        });\r\n    });\r\n    Object.entries(customOperators || {}).forEach(([key, value]) => {\r\n        map[key] = value.options;\r\n    });\r\n    Object.keys(map).forEach((key) => {\r\n        map[key] = map[key].sort((a, b) => a.label.localeCompare(b.label));\r\n    });\r\n    return map;\r\n}\r\n\r\n/**\r\n * Allows retrieving operators by value, in O(1) time.\r\n *\r\n * @param {Array} operators cf. `operators.js`.\r\n * @param {Object} customOperators Custom operators to be used, if any.\r\n * @returns {Object} Operators map.\r\n */\r\nexport function generateOperatorsByValue(operators, customOperators) {\r\n    const map = {};\r\n    operators.forEach((operator) => {\r\n        const { value } = operator;\r\n        if (Object.prototype.hasOwnProperty.call(map, value)) {\r\n            throw new Error(`Duplicated operator: ${value}`);\r\n        }\r\n        map[value] = { ...operator };\r\n    });\r\n    Object.values(customOperators || {}).forEach((value) => {\r\n        value.options.forEach((option) => {\r\n            if (!Object.prototype.hasOwnProperty.call(map, option.value)) {\r\n                map[option.value] = { types: [] };\r\n            }\r\n            map[option.value] = {\r\n                ...map[option.value],\r\n                label: option.label,\r\n                value: option.value,\r\n            };\r\n            const { types } = map[option.value];\r\n            if (!types.includes(value.type)) {\r\n                types.push(value.type);\r\n            }\r\n        });\r\n    });\r\n    return map;\r\n}\r\n\r\n/**\r\n * Finds a node by ID.\r\n *\r\n * @param {Number} id The node ID.\r\n * @param {Object} node The starting node.\r\n * @returns {Object} The node with the given ID, or null if not found.\r\n */\r\nexport const findNodeById = (id, node) => {\r\n    if (node.id === id) {\r\n        return node;\r\n    }\r\n    if (node.sets) {\r\n        for (const set of node.sets) {\r\n            const found = findNodeById(id, set);\r\n            if (found) {\r\n                return found;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Finds a node's parent node by ID.\r\n *\r\n * @param {Number} id The node ID.\r\n * @param {Object} node The starting node.\r\n * @param {Object} parent The starting parent.\r\n * @returns {Object} The searched node's parent.\r\n */\r\nexport const findParentById = (id, node, parent) => {\r\n    if (!parent) {\r\n        parent = node;\r\n    }\r\n    if (node.id === id) {\r\n        return parent;\r\n    }\r\n    if (node.sets) {\r\n        parent = node;\r\n        for (const set of node.sets) {\r\n            const found = findParentById(id, set, parent);\r\n            if (found) {\r\n                return found;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Resets a query's node IDs.\r\n *\r\n * @param {Object} query A query with rules.\r\n * @param {string} mode \"random\" to set random IDs, or anything else to delete existing ones.\r\n * @returns {Object} The processed query instance.\r\n */\r\nexport function resetNodeIds(query, mode) {\r\n    const random = mode === \"random\";\r\n    if (random) {\r\n        query.id = query.id || Math.random();\r\n    } else {\r\n        delete query.id;\r\n    }\r\n    query.sets.map((set) => {\r\n        if (random) {\r\n            set.id = set.id || Math.random();\r\n        } else {\r\n            delete set.id;\r\n        }\r\n        if (set.sets) {\r\n            resetNodeIds(set, mode);\r\n        }\r\n        return set;\r\n    });\r\n    return query;\r\n}\r\n\r\n/**\r\n * Deep clones a query.\r\n *\r\n * @param {Object} query The query to be cloned.\r\n * @returns {Object} Another instance of the given query.\r\n */\r\nexport function cloneQuery(query) {\r\n    return JSON.parse(JSON.stringify(query));\r\n}\r\n\r\n/**\r\n * Formats a query by deleting IDs from all nodes.\r\n *\r\n * @param {Object} query The query to be formatted.\r\n * @returns {Object} Another instance of the given query, without IDs.\r\n */\r\nexport function formatQuery(query) {\r\n    query = cloneQuery(query);\r\n    query = resetNodeIds(query);\r\n    return query;\r\n}\r\n\r\n/**\r\n * Verifies if a group is valid, i.e. all rules and nested groups are filled.\r\n *\r\n * @param {Object} group The group to validate.\r\n * @returns {Boolean} True if valid, false otherwise.\r\n */\r\nexport function isGroupValid(group) {\r\n    if (Object.getOwnPropertyNames(group).length === 0) {\r\n        return false;\r\n    }\r\n    for (const set of group.sets) {\r\n        if (set.sets) {\r\n            if (!isGroupValid(set)) {\r\n                return false;\r\n            }\r\n        } else if (!isRuleValid(set)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Verifies if a rule is valid.\r\n *\r\n * @param {Object} rule The rule to validate.\r\n * @returns {Boolean} True if valid, false otherwise.\r\n */\r\nexport function isRuleValid(set) {\r\n    if (!set.field || !set.operator) {\r\n        return false;\r\n    }\r\n    if (/null/gi.test(set.operator)) {\r\n        return true;\r\n    }\r\n    const { value } = set;\r\n\r\n    if (Array.isArray(value)) {\r\n        return value?.length > 0;\r\n    }\r\n    if (/string/.test(typeof value)) {\r\n        return Boolean(value?.trim());\r\n    }\r\n    return value !== null && value !== undefined;\r\n}\r\n\r\n/**\r\n * Verifies if all fields have a corresponding filter.\r\n *\r\n * @param {Object} group The group to validate.\r\n * @param {Object} filtersByValue The filters to check against.\r\n * @returns {Boolean} True if valid, false otherwise.\r\n */\r\nfunction verifyFilters(group, filtersByValue) {\r\n    for (const set of group.sets) {\r\n        if (set.sets) {\r\n            if (!verifyFilters(set, filtersByValue)) {\r\n                return false;\r\n            }\r\n        } else if (!Object.prototype.hasOwnProperty.call(filtersByValue, set.field)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Checks if all fields have a corresponding filter.\r\n *\r\n * @param {Object} state The query to validate.\r\n * @param {Object} context The context with filters to check against.\r\n * @returns {Boolean} True if valid, false otherwise.\r\n */\r\nfunction isQueryValid(query, context) {\r\n    let valid = isGroupValid(query);\r\n\r\n    // Check the query is consistent with the available filters.\r\n    if (valid && context?.filtersByValue) {\r\n        valid = verifyFilters(query, context.filtersByValue);\r\n    }\r\n    return valid;\r\n}\r\n\r\nconst emptySet = function () {\r\n    return {\r\n        field: null,\r\n        id: Math.random(),\r\n        operator: null,\r\n        value: null,\r\n    };\r\n};\r\n\r\nconst emptyCase = function () {\r\n    return {\r\n        field: null,\r\n        id: Math.random(),\r\n        operator: null,\r\n        value: null,\r\n        tfield: null,\r\n        toperator: null,\r\n        tvalue: null,\r\n    };\r\n};\r\n\r\nconst emptyGroup = function () {\r\n    return {\r\n        combinator: \"case\",\r\n        id: Math.random(),\r\n        cfield: null,\r\n        sets: [\r\n            emptyCase()\r\n        ],\r\n    };\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    const query = { ...state };\r\n\r\n    switch (action.type) {\r\n        case \"add-group\": {\r\n            const group = findNodeById(action.id, query);\r\n            group.sets.push(emptyGroup());\r\n            return query;\r\n        }\r\n        case \"add-set\": {\r\n            const group = findNodeById(action.id, query);\r\n            group.sets.push(emptySet());\r\n            return query;\r\n        }\r\n        case \"move-set\": {\r\n            const { addedIndex, id, removedIndex } = action;\r\n            const group = findNodeById(id, query);\r\n            group.sets = arrayMove(group.sets, removedIndex, addedIndex);\r\n            return query;\r\n        }\r\n        case \"remove-node\": {\r\n            const parent = findParentById(action.id, query);\r\n            parent.sets = parent.sets.filter((set) => set.id !== action.id);\r\n            return query;\r\n        }\r\n        case \"reset-query\": {\r\n            let { query } = action;\r\n            query = resetNodeIds(query, \"random\");\r\n            return query;\r\n        }\r\n        case \"set-combinator\": {\r\n            const node = findNodeById(action.id, query);\r\n            node.combinator = action.value;\r\n            return query;\r\n        }\r\n        case \"set-field\": {\r\n            const node = findNodeById(action.id, query);\r\n            console.log(action.cfield);\r\n            if(node.cfield)\r\n                node.field = action.value;\r\n            else{\r\n            node.field = action.value;\r\n            node.operator = action.operator;\r\n            node.value = null;\r\n            }\r\n            return query;\r\n        }\r\n        case \"set-operator\": {\r\n            const node = findNodeById(action.id, query);\r\n            node.operator = action.value;\r\n            if (/null/.test(action.value)) {\r\n                node.value = null;\r\n            }\r\n            return query;\r\n        }\r\n        case \"set-value\": {\r\n            const node = findNodeById(action.id, query);            \r\n            if(action.vtype === \"case\"){\r\n                node.tvalue = action.value;\r\n            }\r\n            else\r\n                node.value = action.value;\r\n            return query;\r\n        }\r\n        default: {\r\n            return query;\r\n        }\r\n    }\r\n}\r\n\r\nconst UpdateQueryBuilder = React.memo(\r\n    (props) => {\r\n        const [state, dispatch] = React.useReducer(\r\n            reducer,\r\n            props.query || {\r\n                combinator: \"set\",\r\n                sets: [],\r\n            }\r\n        );\r\n        const [context, setContext] = React.useState(null);\r\n\r\n        // Generate the context only once, or when the properties change.\r\n        React.useEffect(() => {\r\n            const { customOperators, filters, maxLevels, operators } = props;\r\n            setContext({\r\n                customOperators,\r\n                dispatch,\r\n                filters: props.sortFilters ? sortFilterGroupsByLabel(filters) : filters,\r\n                filtersByValue: generateFiltersByValue(filters),\r\n                flattenedFilters: generateFlattenedFilters(filters),\r\n                maxLevels,\r\n                operators,\r\n                operatorsByValue: generateOperatorsByValue(operators, customOperators),\r\n                operatorsByType: generateOperatorsByType(operators, customOperators),\r\n            });\r\n        }, [dispatch, props, props.filters, props.maxLevels, props.operators]);\r\n\r\n        // Reset the query if it was changed externally.\r\n        React.useEffect(() => {\r\n            if (!props.query?.id) {\r\n                dispatch({ type: \"reset-query\", query: props.query });\r\n            }\r\n        }, [props.query]);\r\n\r\n        // Propagate the change if the query is modified.\r\n        React.useEffect(() => {\r\n            if (props.onChange) {\r\n                const valid = isQueryValid(state, context);\r\n                props.onChange(state, valid);\r\n            }\r\n        }, [context, props, props.onChange, state]);\r\n\r\n        return state.id && context ? (\r\n            <Context.Provider value={context}>\r\n                \r\n                <SetGroup combinator={state.combinator} id={state.id} level={0} sets={state.sets} />\r\n                {props.debug && (\r\n                    <>\r\n                        <pre>{JSON.stringify(formatQuery(state), null, 4)}</pre>\r\n                        <pre>Valid? {isQueryValid(state, context) ? \"true\" : \"false\"}</pre>\r\n                    </>\r\n                )}\r\n            </Context.Provider>\r\n        ) : (\r\n            <span />\r\n        );\r\n    },\r\n    (prevProps, nextProps) => {\r\n        // Skip re-rendering if the query didn't change.\r\n        return dequal(prevProps.query, nextProps.query);\r\n    }\r\n);\r\n\r\n//SQL Query\r\nexport function sqlQuery(qr) {\r\n    let exp = '';\r\n\r\n    for (const obj of qr.rules) {\r\n\r\n        if (obj.field) {\r\n            let field = obj.field;         \r\n            const numCheck = field.substring(field.length - 1);\r\n            if (numCheck === '1'){\r\n                field = field.substring(0, field.length - 1);\r\n            }\r\n            else if(numCheck === '2' || numCheck === '3'){\r\n                field = \"coalesce(\"+field.substring(0, field.length - 1)+\", '')\";\r\n            }\r\n            let operator = obj.operator;            \r\n            operator = operators.find(o=> (o.value === obj.operator)).symbol;\r\n\r\n            let value = obj.value;\r\n            if (typeof obj.value != 'boolean') {\r\n                if (Array.isArray(obj.value)) {\r\n                    let conval = '';\r\n                    obj.value.forEach(val => {\r\n                        conval = conval + \" '\" + val + \"',\";\r\n                    });\r\n                    value = '(' + conval + ')';\r\n                }\r\n                else if (obj.value != null) {\r\n                    if(obj.operator === 'equal' || obj.operator === 'not_equal')\r\n                        value = `'${obj.value}'`;\r\n                    else if(obj.operator === 'contains' || obj.operator === 'not_contains')\r\n                        value = `'%${obj.value}%'`;\r\n                    else if(obj.operator === 'begins_with')\r\n                        value = `'${obj.value}%'`;\r\n                    else if(obj.operator === 'ends_with')\r\n                        value = `'%${obj.value}'`;\r\n                }\r\n                else {\r\n                    value = \"\";\r\n                }\r\n            }\r\n            exp = `${exp} ${field} ${operator} ${value} ` + qr.combinator;\r\n        }\r\n        else if (obj.rules) {\r\n            exp = `${exp} (${sqlQuery(obj)}) ` + qr.combinator;\r\n        }\r\n    }\r\n    if(exp.substring(exp.length - 2) === \"or\")\r\n        exp = exp.substring(0, exp.length - 2);\r\n    else if(exp.substring(exp.length - 3) === \"set\")\r\n        exp = exp.substring(0, exp.length - 3);\r\n    return exp;\r\n}\r\n\r\nUpdateQueryBuilder.formatQuery = formatQuery;\r\nUpdateQueryBuilder.isQueryValid = isGroupValid;\r\nUpdateQueryBuilder.operators = operators;\r\nUpdateQueryBuilder.sqlQuery = sqlQuery;\r\nUpdateQueryBuilder.resetNodeIds = resetNodeIds;\r\n\r\nUpdateQueryBuilder.defaultProps = {\r\n    customOperators: {},\r\n    debug: false,\r\n    filters: [],\r\n    maxLevels: 1,\r\n    operators: [...operators],\r\n    onChange: null,\r\n    query: emptyGroup(),\r\n    sortFilters: true,\r\n};\r\n\r\nUpdateQueryBuilder.propTypes = {\r\n    customOperators: PropTypes.object,\r\n    debug: PropTypes.bool,\r\n    filters: PropTypes.array,\r\n    maxLevels: PropTypes.number,\r\n    operators: PropTypes.array,\r\n    onChange: PropTypes.func,\r\n    query: PropTypes.object,\r\n    sortFilters: PropTypes.bool,\r\n};\r\n\r\nexport default UpdateQueryBuilder;\r\n","import arrayMove from \"array-move\";\r\nimport { dequal } from \"dequal\";\r\nimport PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\n\r\nimport Context from \"./context\";\r\nimport operators from \"./operators\";\r\nimport RuleGroup from \"./RuleGroup\";\r\nimport UpdateQueryBuilder from \"./UpdateQueryBuilder\";\r\n\r\n/**\r\n * Allows retrieving filters by value, in O(1) time.\r\n *\r\n * @param {Array} filters The data descriptions.\r\n * @returns {Object} Filters map.\r\n */\r\nexport function generateFiltersByValue(filters) {\r\n    const map = {};\r\n    filters.forEach((filter) => {\r\n        const options = filter.options || [];\r\n        options.forEach((option) => {\r\n            const { value } = option;\r\n            if (Object.prototype.hasOwnProperty.call(map, value)) {\r\n                throw new Error(`Duplicated filter: ${value}`);\r\n            }\r\n            map[value] = { ...option };\r\n        });\r\n    });\r\n    return map;\r\n}\r\n\r\n/**\r\n * Flattens filters for autocomplete fields.\r\n *\r\n * @param {Array} filters The data descriptions.\r\n * @returns {List} Filters list.\r\n */\r\nexport function generateFlattenedFilters(filters) {\r\n    const list = [];\r\n    filters.forEach((filter) => {\r\n        filter.options.forEach((option) => {\r\n            list.push({\r\n                group: filter.label,\r\n                ...option,\r\n            });\r\n        });\r\n    });\r\n    return list;\r\n}\r\n\r\n/**\r\n * Sorts filters within their own groups.\r\n *\r\n * @param {Array} filters The data descriptions.\r\n * @returns {Array} The sorted filters.\r\n */\r\nexport function sortFilterGroupsByLabel(filters) {\r\n    filters.forEach((filter) => {\r\n        filter.options = filter.options.sort((a, b) => a.label.localeCompare(b.label));\r\n    });\r\n    return filters;\r\n}\r\n\r\n/**\r\n * Allows retrieving operators by type, in O(1) time.\r\n *\r\n * @param {Array} operators cf. `operators.js`.\r\n * @param {Object} customOperators Custom operators to be used, if any.\r\n * @returns {Object} Operators map.\r\n */\r\nexport function generateOperatorsByType(operators, customOperators) {\r\n    const map = {};\r\n    const types = [...new Set([].concat(...operators.map((operator) => operator.types)))].sort();\r\n\r\n    types.forEach((type) => {\r\n        if (!Object.prototype.hasOwnProperty.call(map, type)) {\r\n            map[type] = [];\r\n        }\r\n        operators.forEach((operator) => {\r\n            if (operator.types.includes(type)) {\r\n                map[type].push({\r\n                    label: operator.label,\r\n                    value: operator.value,\r\n                });\r\n            }\r\n        });\r\n    });\r\n    Object.entries(customOperators || {}).forEach(([key, value]) => {\r\n        map[key] = value.options;\r\n    });\r\n    Object.keys(map).forEach((key) => {\r\n        map[key] = map[key].sort((a, b) => a.label.localeCompare(b.label));\r\n    });\r\n    return map;\r\n}\r\n\r\n/**\r\n * Allows retrieving operators by value, in O(1) time.\r\n *\r\n * @param {Array} operators cf. `operators.js`.\r\n * @param {Object} customOperators Custom operators to be used, if any.\r\n * @returns {Object} Operators map.\r\n */\r\nexport function generateOperatorsByValue(operators, customOperators) {\r\n    const map = {};\r\n    operators.forEach((operator) => {\r\n        const { value } = operator;\r\n        if (Object.prototype.hasOwnProperty.call(map, value)) {\r\n            throw new Error(`Duplicated operator: ${value}`);\r\n        }\r\n        map[value] = { ...operator };\r\n    });\r\n    Object.values(customOperators || {}).forEach((value) => {\r\n        value.options.forEach((option) => {\r\n            if (!Object.prototype.hasOwnProperty.call(map, option.value)) {\r\n                map[option.value] = { types: [] };\r\n            }\r\n            map[option.value] = {\r\n                ...map[option.value],\r\n                label: option.label,\r\n                value: option.value,\r\n            };\r\n            const { types } = map[option.value];\r\n            if (!types.includes(value.type)) {\r\n                types.push(value.type);\r\n            }\r\n        });\r\n    });\r\n    return map;\r\n}\r\n\r\n/**\r\n * Finds a node by ID.\r\n *\r\n * @param {Number} id The node ID.\r\n * @param {Object} node The starting node.\r\n * @returns {Object} The node with the given ID, or null if not found.\r\n */\r\nexport const findNodeById = (id, node) => {\r\n    if (node.id === id) {\r\n        return node;\r\n    }\r\n    if (node.rules) {\r\n        for (const rule of node.rules) {\r\n            const found = findNodeById(id, rule);\r\n            if (found) {\r\n                return found;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Finds a node's parent node by ID.\r\n *\r\n * @param {Number} id The node ID.\r\n * @param {Object} node The starting node.\r\n * @param {Object} parent The starting parent.\r\n * @returns {Object} The searched node's parent.\r\n */\r\nexport const findParentById = (id, node, parent) => {\r\n    if (!parent) {\r\n        parent = node;\r\n    }\r\n    if (node.id === id) {\r\n        return parent;\r\n    }\r\n    if (node.rules) {\r\n        parent = node;\r\n        for (const rule of node.rules) {\r\n            const found = findParentById(id, rule, parent);\r\n            if (found) {\r\n                return found;\r\n            }\r\n        }\r\n    }\r\n    return null;\r\n};\r\n\r\n/**\r\n * Resets a query's node IDs.\r\n *\r\n * @param {Object} query A query with rules.\r\n * @param {string} mode \"random\" to set random IDs, or anything else to delete existing ones.\r\n * @returns {Object} The processed query instance.\r\n */\r\nexport function resetNodeIds(query, mode) {\r\n    const random = mode === \"random\";\r\n    if (random) {\r\n        query.id = query.id || Math.random();\r\n    } else {\r\n        delete query.id;\r\n    }\r\n    query.rules.map((rule) => {\r\n        if (random) {\r\n            rule.id = rule.id || Math.random();\r\n        } else {\r\n            delete rule.id;\r\n        }\r\n        if (rule.rules) {\r\n            resetNodeIds(rule, mode);\r\n        }\r\n        return rule;\r\n    });\r\n    return query;\r\n}\r\n\r\n\r\nexport function newResetNodeIds(query, mode) {\r\n    const random = mode === \"random\";\r\n    if(query.selectRules){\r\n        resetNodeIds(query.selectRules);        \r\n    }\r\n    if(query.updateRules){\r\n        UpdateQueryBuilder.resetNodeIds(query.updateRules);        \r\n    }\r\n    if(query.updateConditions){\r\n        resetNodeIds(query.updateConditions);        \r\n    }\r\n    return query;\r\n}\r\n\r\n/**\r\n * Deep clones a query.\r\n *\r\n * @param {Object} query The query to be cloned.\r\n * @returns {Object} Another instance of the given query.\r\n */\r\nexport function cloneQuery(query) {\r\n    return JSON.parse(JSON.stringify(query));\r\n}\r\n\r\n/**\r\n * Formats a query by deleting IDs from all nodes.\r\n *\r\n * @param {Object} query The query to be formatted.\r\n * @returns {Object} Another instance of the given query, without IDs.\r\n */\r\nexport function formatQuery(query) {\r\n    query = cloneQuery(query);\r\n    query = resetNodeIds(query);\r\n    return query;\r\n}\r\n\r\n\r\nexport function newFormatQuery(query) {\r\n    query = cloneQuery(query);\r\n    query = newResetNodeIds(query);\r\n    return query;\r\n}\r\n/**\r\n * Verifies if a group is valid, i.e. all rules and nested groups are filled.\r\n *\r\n * @param {Object} group The group to validate.\r\n * @returns {Boolean} True if valid, false otherwise.\r\n */\r\nexport function isGroupValid(group) {\r\n    if (Object.getOwnPropertyNames(group).length === 0) {\r\n        return false;\r\n    }\r\n    for (const rule of group.rules) {\r\n        if (rule.rules) {\r\n            if (!isGroupValid(rule)) {\r\n                return false;\r\n            }\r\n        } else if (!isRuleValid(rule)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Verifies if a rule is valid.\r\n *\r\n * @param {Object} rule The rule to validate.\r\n * @returns {Boolean} True if valid, false otherwise.\r\n */\r\nexport function isRuleValid(rule) {\r\n    if (!rule.field || !rule.operator) {\r\n        return false;\r\n    }\r\n    if (/null/gi.test(rule.operator)) {\r\n        return true;\r\n    }\r\n    const { value } = rule;\r\n\r\n    if (Array.isArray(value)) {\r\n        return value?.length > 0;\r\n    }\r\n    if (/string/.test(typeof value)) {\r\n        return Boolean(value?.trim());\r\n    }\r\n    return value !== null && value !== undefined;\r\n}\r\n\r\n/**\r\n * Verifies if all fields have a corresponding filter.\r\n *\r\n * @param {Object} group The group to validate.\r\n * @param {Object} filtersByValue The filters to check against.\r\n * @returns {Boolean} True if valid, false otherwise.\r\n */\r\nfunction verifyFilters(group, filtersByValue) {\r\n    for (const rule of group.rules) {\r\n        if (rule.rules) {\r\n            if (!verifyFilters(rule, filtersByValue)) {\r\n                return false;\r\n            }\r\n        } else if (!Object.prototype.hasOwnProperty.call(filtersByValue, rule.field)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Checks if all fields have a corresponding filter.\r\n *\r\n * @param {Object} state The query to validate.\r\n * @param {Object} context The context with filters to check against.\r\n * @returns {Boolean} True if valid, false otherwise.\r\n */\r\nfunction isQueryValid(query, context) {\r\n    let valid = isGroupValid(query);\r\n\r\n    // Check the query is consistent with the available filters.\r\n    if (valid && context?.filtersByValue) {\r\n        valid = verifyFilters(query, context.filtersByValue);\r\n    }\r\n    return valid;\r\n}\r\n\r\nconst emptyRule = function () {\r\n    return {\r\n        field: null,\r\n        id: Math.random(),\r\n        operator: null,\r\n        value: null,\r\n    };\r\n};\r\n\r\nconst emptyGroup = function () {\r\n    return {\r\n        combinator: \"and\",\r\n        id: Math.random(),\r\n        rules: [emptyRule()],\r\n    };\r\n};\r\n\r\nfunction reducer(state, action) {\r\n    const query = { ...state };\r\n\r\n    switch (action.type) {\r\n        case \"add-group\": {\r\n            const group = findNodeById(action.id, query);\r\n            group.rules.push(emptyGroup());\r\n            return query;\r\n        }\r\n        case \"add-rule\": {\r\n            const group = findNodeById(action.id, query);\r\n            group.rules.push(emptyRule());\r\n            return query;\r\n        }\r\n        case \"move-rule\": {\r\n            const { addedIndex, id, removedIndex } = action;\r\n            const group = findNodeById(id, query);\r\n            group.rules = arrayMove(group.rules, removedIndex, addedIndex);\r\n            return query;\r\n        }\r\n        case \"remove-node\": {\r\n            const parent = findParentById(action.id, query);\r\n            parent.rules = parent.rules.filter((rule) => rule.id !== action.id);\r\n            return query;\r\n        }\r\n        case \"reset-query\": {\r\n            let { query } = action;\r\n            query = resetNodeIds(query, \"random\");\r\n            return query;\r\n        }\r\n        case \"set-combinator\": {\r\n            const node = findNodeById(action.id, query);\r\n            node.combinator = action.value;\r\n            return query;\r\n        }\r\n        case \"set-field\": {\r\n            const node = findNodeById(action.id, query);\r\n            node.field = action.value;\r\n            node.operator = action.operator;\r\n            node.value = null;\r\n            return query;\r\n        }\r\n        case \"set-operator\": {\r\n            const node = findNodeById(action.id, query);\r\n            node.operator = action.value;\r\n            if (/null/.test(action.value)) {\r\n                node.value = null;\r\n            }\r\n            return query;\r\n        }\r\n        case \"set-value\": {\r\n            const node = findNodeById(action.id, query);\r\n            node.value = action.value;\r\n            return query;\r\n        }\r\n        default: {\r\n            return query;\r\n        }\r\n    }\r\n}\r\n\r\nconst QueryBuilder = React.memo(\r\n    (props) => {\r\n        const [state, dispatch] = React.useReducer(\r\n            reducer,\r\n            props.query || {\r\n                combinator: \"and\",\r\n                rules: [],\r\n            }\r\n        );\r\n        const [context, setContext] = React.useState(null);\r\n\r\n        // Generate the context only once, or when the properties change.\r\n        React.useEffect(() => {\r\n            const { customOperators, filters, maxLevels, operators } = props;\r\n            setContext({\r\n                customOperators,\r\n                dispatch,\r\n                filters: props.sortFilters ? sortFilterGroupsByLabel(filters) : filters,\r\n                filtersByValue: generateFiltersByValue(filters),\r\n                flattenedFilters: generateFlattenedFilters(filters),\r\n                maxLevels,\r\n                operators,\r\n                operatorsByValue: generateOperatorsByValue(operators, customOperators),\r\n                operatorsByType: generateOperatorsByType(operators, customOperators),\r\n            });\r\n        }, [dispatch, props, props.filters, props.maxLevels, props.operators]);\r\n\r\n        // Reset the query if it was changed externally.\r\n        React.useEffect(() => {\r\n            if (!props.query?.id) {\r\n                dispatch({ type: \"reset-query\", query: props.query });\r\n            }\r\n        }, [props.query]);\r\n\r\n        // Propagate the change if the query is modified.\r\n        React.useEffect(() => {\r\n            if (props.onChange) {\r\n                const valid = isQueryValid(state, context);\r\n                props.onChange(state, valid);\r\n            }\r\n        }, [context, props, props.onChange, state]);\r\n\r\n        return state.id && context ? (\r\n            <Context.Provider value={context}>                \r\n                <RuleGroup combinator={state.combinator} id={state.id} level={0} rules={state.rules} />\r\n                {props.debug && (\r\n                    <>\r\n                        <pre>{JSON.stringify(formatQuery(state), null, 4)}</pre>\r\n                        <pre>Valid? {isQueryValid(state, context) ? \"true\" : \"false\"}</pre>\r\n                    </>\r\n                )}\r\n            </Context.Provider>\r\n        ) : (\r\n            <span />\r\n        );\r\n    },\r\n    (prevProps, nextProps) => {\r\n        // Skip re-rendering if the query didn't change.\r\n        return dequal(prevProps.query, nextProps.query);\r\n    }\r\n);\r\n\r\n//SQL Query\r\nexport function sqlQuery(qr) {\r\n    let exp = '';\r\n\r\n    for (const obj of qr.rules) {\r\n\r\n        if (obj.field) {\r\n            let field = obj.field;         \r\n            const numCheck = field.substring(field.length - 1);\r\n            if (numCheck === '1'){\r\n                field = field.substring(0, field.length - 1);\r\n            }\r\n            else if(numCheck === '2' || numCheck === '3'){\r\n                field = \"coalesce(\"+field.substring(0, field.length - 1)+\", '')\";\r\n            }\r\n            let operator = obj.operator;            \r\n            operator = operators.find(o=> (o.value === obj.operator)).symbol;\r\n\r\n            let value = obj.value;\r\n            if (typeof obj.value != 'boolean') {\r\n                if (Array.isArray(obj.value)) {\r\n                    let conval = '';\r\n                    obj.value.forEach(val => {\r\n                        conval = conval + \" '\" + val + \"',\";\r\n                    });\r\n                    value = '(' + conval + ')';\r\n                }\r\n                else if (obj.value != null) {\r\n                    if(obj.operator === 'equal' || obj.operator === 'not_equal')\r\n                        value = `'${obj.value}'`;\r\n                    else if(obj.operator === 'contains' || obj.operator === 'not_contains')\r\n                        value = `'%${obj.value}%'`;\r\n                    else if(obj.operator === 'begins_with')\r\n                        value = `'${obj.value}%'`;\r\n                    else if(obj.operator === 'ends_with')\r\n                        value = `'%${obj.value}'`;\r\n                }\r\n                else {\r\n                    value = \"\";\r\n                }\r\n            }\r\n            exp = `${exp} ${field} ${operator} ${value} ` + qr.combinator;\r\n        }\r\n        else if (obj.rules) {\r\n            exp = `${exp} (${sqlQuery(obj)}) ` + qr.combinator;\r\n        }\r\n    }\r\n    if(exp.substring(exp.length - 2) === \"or\")\r\n        exp = exp.substring(0, exp.length - 2);\r\n    else if(exp.substring(exp.length - 3) === \"and\")\r\n        exp = exp.substring(0, exp.length - 3);\r\n    return exp;\r\n}\r\n\r\nexport function setConditions(qr) {\r\n    let exp = '';\r\n\r\n    for (const obj of qr.sets) {\r\n        if (obj.field) {\r\n            let field = obj.field;\r\n            const numCheck = field.substring(field.length - 1);\r\n            if (numCheck === '1' || numCheck === '3'){\r\n                field = field.substring(0, field.length - 1);\r\n            }\r\n            let operator = obj.operator;            \r\n            operator = operators.find(o=> (o.value === obj.operator)).symbol;            \r\n            let value = obj.value;\r\n            if (typeof obj.value != 'boolean') {\r\n                if (Array.isArray(obj.value)) {\r\n                    let conval = '';\r\n                    obj.value.forEach(val => {\r\n                        conval = conval + \" '\" + val + \"',\";\r\n                    });\r\n                    value = '(' + conval + ')';\r\n                }\r\n                else if (obj.value != null) {\r\n                    if(obj.operator === 'equal' || obj.operator === 'not_equal')\r\n                        value = `'${obj.value}'`;\r\n                    else if(obj.operator === 'contains' || obj.operator === 'not_contains')\r\n                        value = `'%${obj.value}%'`;\r\n                    else if(obj.operator === 'begins_with')\r\n                        value = `'${obj.value}%'`;\r\n                    else if(obj.operator === 'ends_with')\r\n                        value = `'%${obj.value}'`;\r\n                    else if(obj.operator === 'equals')\r\n                        value = `'${obj.value}'`;\r\n                    else if(obj.operator === 'left')\r\n                        value = `left(${obj.field},${obj.value})`;\r\n                    else if(obj.operator === 'right')\r\n                        value = `right(${obj.field},${obj.value})`;\r\n                    else if(obj.operator === 'substring')\r\n                        value = `substring(${obj.field},${obj.value})`;\r\n                }\r\n                else {\r\n                    value = \"NULL\";\r\n                }\r\n            }\r\n            \r\n            if (obj.tfield){\r\n                exp = ` ${exp} when ${field} ${operator} ${value} then = '{${obj.tvalue}}' `;\r\n            }\r\n            else \r\n                exp = `${exp} ${field} ${operator} ${value +','} `;\r\n        }\r\n        else if (obj.sets) {\r\n            if (obj.combinator === 'case'){\r\n                let cfield = obj.sets[0].field;\r\n                const numCheck = cfield.substring(cfield.length - 1);\r\n                if (numCheck === '1' || numCheck === '3'){\r\n                    cfield = cfield.substring(0, cfield.length - 1);\r\n                }\r\n                exp =  ` ${exp }${cfield} = ${obj.combinator} ${setConditions(obj)} else ${cfield} end `;\r\n            }\r\n        }\r\n    }\r\n    if(exp.substring(exp.length - 2) === \"set\")\r\n        exp = exp.substring(0, exp.length - 2);\r\n    else if(exp.substring(exp.length - 4) === \"case\")\r\n        exp = exp.substring(0, exp.length - 4);\r\n    return exp;\r\n}\r\n\r\nexport function ruleQuery(query){\r\n    let queryJson = {};\r\n    if(query.selectRules){\r\n        queryJson['selectRules'] = sqlQuery(query.selectRules);\r\n    }\r\n    if(query.updateConditions){\r\n        queryJson['updateConditions'] = sqlQuery(query.updateConditions);\r\n    }\r\n    if(query.updateRules){\r\n        queryJson['updateRules'] = setConditions(query.updateRules);\r\n    }\r\n\r\n    return queryJson;\r\n}\r\n\r\nQueryBuilder.formatQuery = formatQuery;\r\nQueryBuilder.newFormatQuery = newFormatQuery;\r\nQueryBuilder.isQueryValid = isGroupValid;\r\nQueryBuilder.operators = operators;\r\nQueryBuilder.sqlQuery = sqlQuery;\r\nQueryBuilder.ruleQuery = ruleQuery;\r\n\r\nQueryBuilder.defaultProps = {\r\n    customOperators: {},\r\n    debug: false,\r\n    filters: [],\r\n    maxLevels: 1,\r\n    operators: [...operators],\r\n    onChange: null,\r\n    query: emptyGroup(),\r\n    sortFilters: true,\r\n};\r\n\r\nQueryBuilder.propTypes = {\r\n    customOperators: PropTypes.object,\r\n    debug: PropTypes.bool,\r\n    filters: PropTypes.array,\r\n    maxLevels: PropTypes.number,\r\n    operators: PropTypes.array,\r\n    onChange: PropTypes.func,\r\n    query: PropTypes.object,\r\n    sortFilters: PropTypes.bool,\r\n};\r\n\r\nexport default QueryBuilder;\r\n","import { createBrowserHistory as history} from 'history';\r\n\r\nexport default history();","import React, { Component } from 'react';\r\nimport QueryBuilder from \"../rools/QueryBuilder\";\r\nimport UpdateQueryBuilder from \"../rools/UpdateQueryBuilder\";\r\nimport ruleoptions from '../data/filters.json';\r\nimport rules from '../data/rules.json';\r\nimport Button from '@material-ui/core/Button';\r\nimport history from '../history';\r\nimport updateoptions from '../data/updatefilters.json'\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport './ManageRule.css';\r\nimport operators from '../rools/operators.js';\r\nimport fields from '../data/filters.json'\r\n\r\nexport default class ManageRule extends Component {\r\n\r\n    filters = ruleoptions;\r\n    state = {\r\n        defaultRule: {\r\n        ruleId: \"RULE_NEW\",\r\n        description: \"Rule New\",\r\n        status: \"Active\",\r\n        version: \"1.0\",\r\n        created_datetime: \"\",\r\n        updated_datetime: \"\",\r\n        selectRules: {\r\n            combinator: \"and\",\r\n            rules: [\r\n                {\r\n                    field: null,\r\n                    operator: null,\r\n                    value: null,\r\n                },\r\n            ],\r\n        },\r\n        updateRules: {\r\n            combinator: \"set\",\r\n            sets: [\r\n                {\r\n                    field: null,\r\n                    operator: null,\r\n                    value: null,\r\n                },\r\n            ],\r\n        },\r\n        updateConditions: {\r\n            combinator: \"and\",\r\n            rules: [\r\n                {\r\n                    field: null,\r\n                    operator: null,\r\n                    value: null,\r\n                },\r\n            ],\r\n        }\r\n    },\r\n        activeTabIndex: 0,\r\n        ruleQuery: {},\r\n    };\r\n\r\n    rowIdParam = new URLSearchParams(this.props.location.search);\r\n    rowId = this.rowIdParam.get('row');\r\n    ruleId = this.rowIdParam.get('ruleId');\r\n\r\n    \r\n    \r\n\r\n    render() {\r\n        let defaultRule = this.state.defaultRule;        \r\n        if(rules.find(rule => '' + rule.id === this.rowId)){\r\n            defaultRule = rules.find(rule => '' + rule.id === this.rowId);\r\n        }\r\n        let ruleQuery = this.state.ruleQuery;\r\n        const row = history.location.state\r\n        const activeTabIndex = this.state.activeTabIndex;\r\n\r\n        \r\n\r\n        return (\r\n            <div className=\"App App-canvas\">\r\n                <div align=\"left\" style={{ width: \"100%\" }}>\r\n                    <h3>Carrier Edit Rule - {this.ruleId}</h3>\r\n                    \r\n                </div>\r\n                <Paper square>\r\n                    <Tabs\r\n                        value={activeTabIndex}\r\n                        indicatorColor=\"primary\"\r\n                        textColor=\"primary\"\r\n                        onChange={(event, activeTabIndex) => {\r\n                            this.setState({activeTabIndex: activeTabIndex});\r\n                            fetch('http://localhost:3001/api', {\r\n                                method: 'POST',\r\n                                headers: {'Content-Type':'application/json'},\r\n                                body: JSON.stringify(defaultRule)\r\n                    \r\n                            })\r\n                            .then(res => res.json())\r\n                            .then(\r\n                                (result) => {\r\n                                    this.setState((prevState) => ({ruleQuery: result.query}));\r\n                                })\r\n                          }}                          \r\n                    >                        \r\n                        <Tab label=\"JSON Output\" />\r\n                        <Tab label=\"SQL Input\" />\r\n                        <Tab label=\"Manage Rule\" />\r\n                    </Tabs> \r\n                    \r\n                </Paper>\r\n                <TabPanel activeTabIndex={activeTabIndex} index={2}>\r\n\r\n                {row.publish==='S'?\r\n                <>\r\n                    <div align=\"left\" class=\"header\"><b>When:</b></div>\r\n                    <QueryBuilder\r\n                        filters={this.filters}\r\n                        query={row.selectRule}\r\n                        maxLevels={4}\r\n                        onChange={(defaultRule, valid) => {\r\n                            this.setState(defaultRule.selectRules);\r\n                        }}\r\n                    />\r\n                    <div align=\"left\"><b>Clone the Lead and Change:</b></div>\r\n                    <UpdateQueryBuilder\r\n                        filters={updateoptions}\r\n                        query={row.updateRule}\r\n                        maxLevels={1}\r\n                        onChange={(defaultRule, valid) => {\r\n                            this.setState(defaultRule.updateRules);\r\n                        }}\r\n                    />\r\n                    <QueryBuilder\r\n                        filters={this.filters}\r\n                        query={defaultRule.updateConditions}\r\n                        maxLevels={4}\r\n                        onChange={(defaultRule, valid) => {\r\n                            this.setState(defaultRule.updateConditions);\r\n                        }}\r\n                    />\r\n                    </>\r\n                    :\r\n                    <div style={{ display: 'inline-block', width: '100%', overflow: 'hidden', paddingLeft: 10, paddingTop: 20 }}>\r\n\r\n                        <div align=\"left\" style={{ float: 'left', paddingRight: 50 }}>\r\n                            Invalid JSON Data!\r\n                        </div>\r\n                    </div>\r\n                    }\r\n                </TabPanel>\r\n                <TabPanel activeTabIndex={activeTabIndex} index={0}>\r\n                    {row.publish==='S'?\r\n                    <div style={{ display: 'inline-block', width: '100%', overflow: 'hidden', paddingLeft: 10, paddingTop: 20 }}>\r\n\r\n                        <div align=\"left\" style={{ float: 'left', paddingRight: 50 }}>\r\n                            <pre>\r\n                                {JSON.stringify(QueryBuilder.newFormatQuery(row), null, 2)}\r\n                            </pre>\r\n\r\n                        </div>\r\n                    </div>\r\n                    :\r\n                    <div style={{ display: 'inline-block', width: '100%', overflow: 'hidden', paddingLeft: 10, paddingTop: 20 }}>\r\n\r\n                        <div align=\"left\" style={{ float: 'left', paddingRight: 50 }}>\r\n                            Invalid JSON Data!\r\n                        </div>\r\n                    </div>\r\n                    }\r\n                </TabPanel>\r\n                <TabPanel activeTabIndex={activeTabIndex} index={1}>\r\n                    <div style={{ display: 'inline-block', width: '100%', overflow: 'hidden', paddingLeft: 10, paddingTop: 20 }}>\r\n\r\n\r\n                        <div align=\"left\" style={{ paddingLeft: 30, paddingRight: 50 }}>\r\n                            <span style={{ fontWeight: 500 }}>\r\n                                {row.insertSql + ';'} <br />\r\n                                <br />\r\n                                {row.updateSql + ';'}\r\n                            </span>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n                </TabPanel>\r\n                <TabPanel activeTabIndex={activeTabIndex} index={3}>\r\n\r\n                    <div style={{ display: 'inline-block', width: '100%', overflow: 'hidden', paddingLeft: 10, paddingTop: 20 }}>\r\n\r\n                        <div align=\"left\" style={{ float: 'left', paddingRight: 50, fontWeight: 500 }}>\r\n                            <b style={{color: \"#1dbb68\"}}>GIVEN: </b>\r\n                            <br/>\r\n                            The <b>RULE</b> is ACTIVE\r\n                            <br/>\r\n                            <br/>   \r\n                            <b style={{color: \"#1dbb68\"}}>WHEN: </b>\r\n                            <br/>\r\n                            {defaultRule.selectRules.rules.map((item, index) =>(\r\n                                item.rules?\r\n                                <>\r\n                                \r\n                                {item.rules.map((subrule, i) =>(\r\n                                    <>\r\n                                    <div>{i!==0 ? <><b>&nbsp;&nbsp;&nbsp;&nbsp;{(item.combinator).toUpperCase() + ' '}</b></>: <b>{'AND '}</b>}{i===0?' ( ':''}\r\n                                    {fields[0].options.find(f=> (f.value === subrule.field))? fields[0].options.find(f=> (f.value === subrule.field)).label \r\n                                    : \r\n                                    fields[1].options.find(f=> (f.value === subrule.field))? fields[1].options.find(f=> (f.value === subrule.field)).label \r\n                                    :\r\n                                    fields[2].options.find(f=> (f.value === subrule.field))? fields[2].options.find(f=> (f.value === subrule.field)).label \r\n                                    :\r\n                                    item.field}\r\n                                    {' ' + operators.find(o=> (o.value === subrule.operator)).symbol + ' ' + subrule.value}\r\n                                    {i ==item.rules.length-1? ' )': ''}\r\n                                    </div>\r\n                                    </>\r\n                                ))}\r\n                                </>\r\n                                :\r\n                                <>\r\n                                {console.log(item)}\r\n                                <div>{index !==0? <b>{'AND '}</b>: ''}\r\n                                {fields[0].options.find(f=> (f.value === item.field))? fields[0].options.find(f=> (f.value === item.field)).label \r\n                                : \r\n                                fields[1].options.find(f=> (f.value === item.field))? fields[1].options.find(f=> (f.value === item.field)).label \r\n                                :\r\n                                fields[2].options.find(f=> (f.value === item.field))? fields[2].options.find(f=> (f.value === item.field)).label \r\n                                :\r\n                                item.field}\r\n                                {' ' + operators.find(o=> (o.value === item.operator)) + ' ' + item.value}</div>\r\n                                </>\r\n                            ))}\r\n                            <br/>\r\n                            <b style={{color: \"#1dbb68\"}}>THEN: </b>\r\n                            <br/>\r\n                            {defaultRule.updateRules.sets.map((item, index) =>(\r\n                                item.combinator?                                \r\n                                <>\r\n                                {item.sets.map((setItem, i)=>(\r\n                                    <div>{i ===0? <><b>{'AND '}</b>{' ( '}</>: <b>&nbsp;&nbsp;&nbsp;&nbsp;{'OR '}</b>}\r\n                                    {'WHEN '}\r\n                                    {updateoptions[0].options.find(f=> (f.value === item.cfield))? updateoptions[0].options.find(f=> (f.value === item.cfield)).label \r\n                                    : \r\n                                    updateoptions[1].options.find(f=> (f.value === item.cfield))? updateoptions[1].options.find(f=> (f.value === item.cfield)).label \r\n                                    :                                   \r\n                                    item.cfield}\r\n                                    {' ' + operators.find(o=> (o.value === setItem.operator)).symbol + ' ' + setItem.value + ' THEN '}\r\n                                    {updateoptions[0].options.find(f=> (f.value === item.cfield))? updateoptions[0].options.find(f=> (f.value === item.cfield)).label \r\n                                    : \r\n                                    updateoptions[1].options.find(f=> (f.value === item.cfield))? updateoptions[1].options.find(f=> (f.value === item.cfield)).label \r\n                                    :                                     \r\n                                    setItem.tfield}\r\n                                    {' ' + operators.find(o=> (o.value === setItem.toperator)).symbol + ' ' +setItem.tvalue}{i ==item.sets.length-1? ' )': ''}</div>\r\n                                ))}\r\n                                </>\r\n                                :\r\n                                <div>{index !==0? <b>{'AND '}</b>: ''}\r\n                                {updateoptions[0].options.find(f=> (f.value === item.field))? updateoptions[0].options.find(f=> (f.value === item.field)).label \r\n                                : \r\n                                updateoptions[1].options.find(f=> (f.value === item.field))? updateoptions[1].options.find(f=> (f.value === item.field)).label \r\n                                : \r\n                                item.field}\r\n                                {' ' +operators.find(o=> (o.value === item.operator)) + ' '} {item.value === 'null'? '': item.value}</div> \r\n                            ))}\r\n\r\n                        </div>\r\n                    </div>\r\n                </TabPanel>\r\n                <div align=\"right\" style={{ position: 'sticky', bottom: 0, zIndex: 1, padding: 10 }}>\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => history.push('/')}\r\n                    >\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction TabPanel(props)\r\n        {\r\n            const {children, activeTabIndex, index} = props;\r\n            return(\r\n                <div>\r\n                    \r\n                {\r\n                    activeTabIndex === index && (\r\n                        <div>{children}</div>\r\n                    )\r\n                }\r\n                </div>\r\n            )\r\n        }\r\n        ","import React, { Component, useEffect, useState } from 'react';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport './Rulelist.css';\r\nimport history from '../history';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Button from '@mui/material/Button';\r\nimport {\r\n    DataGrid,\r\n    GridToolbar,\r\n    GridToolbarContainer,\r\n    GridToolbarColumnsButton,\r\n    GridToolbarFilterButton,\r\n    GridToolbarExport,\r\n    GridToolbarDensitySelector,\r\n  } from '@mui/x-data-grid';\r\n\r\n    \r\n\r\nexport default function RuleList() {\r\n    const [config, setConfig] = useState({})\r\n    const [rows, setRows] = useState([])\r\n    const [successAlert, setSuccessAlert] = useState(false)\r\n    const [selectedRule, setSelectedRule] = useState('')\r\n    const columns = [\r\n        {\r\n            field: 'id',\r\n            headerName: 'ID',\r\n            flex: 0.2,\r\n            minWidth: 100,\r\n            editable: false,\r\n        },\r\n\r\n        {\r\n            field: 'ruleId',\r\n            headerName: 'Rule ID',\r\n            flex: 0.25,\r\n            editable: false,\r\n        },\r\n        {\r\n            field: 'description',\r\n            headerName: 'Description',\r\n            flex: 0.30,\r\n            editable: true,\r\n        },\r\n        {\r\n            field: 'insertSql',\r\n            headerName: 'Insert SQL',\r\n            flex: 0.30,\r\n            editable: true,\r\n        },\r\n        {\r\n            field: 'updateSql',\r\n            headerName: 'Update SQL',\r\n            flex: 0.30,\r\n            editable: true,\r\n        },\r\n        {\r\n            field: 'status',\r\n            headerName: 'Status',\r\n            flex: 0.3,\r\n        },\r\n        {\r\n            field: 'version',\r\n            headerName: 'Version',\r\n            flex: 0.2,\r\n        },\r\n        {\r\n            field: 'review',\r\n            headerName: 'Review',\r\n            flex: 0.1,\r\n            sortable: false,\r\n            disableColumnMenu: true,\r\n            showColumnRightBorder: false,\r\n            disableClickEventBubbling: true,\r\n            renderCell: (params) => {     \r\n                const onClick = () => {\r\n                    \r\n                    console.log(config.token)\r\n                    console.log(config.identity)\r\n                history.push('/LoadRule?row='+params.row.id+'&ruleId='+params.row.ruleId, params.row);\r\n                };\r\n                return <IconButton onClick={onClick}><Icon color=\"secondary\">pageview</Icon></IconButton>;\r\n            }\r\n        },\r\n        {\r\n            field: 'publish',\r\n            headerName: 'Publish',\r\n            flex: 0.1,\r\n            sortable: true,\r\n            disableColumnMenu: true,\r\n            showColumnRightBorder: false,\r\n            disableClickEventBubbling: true,            \r\n            renderCell: (params) => {   \r\n                    if(params.row.publish==='S'){ \r\n                    const onClick = () => {\r\n                        fetch(config.url, {\r\n                            method: 'POST',\r\n                            headers: {\r\n                                'Content-Type': 'application/json',\r\n                                'authorization': `Bearer ` + config.token,\r\n                                'identity': config.identity\r\n                            },\r\n                            body: JSON.stringify(params.row)\r\n                            })\r\n                            .then(res => res.json())\r\n                            .then(\r\n                                (result) => {\r\n                                    console.log(result)\r\n                                    setSuccessAlert(true)\r\n                                    setSelectedRule(params.row.ruleId)\r\n                                })\r\n                    };\r\n                    return <IconButton onClick={onClick}><Icon color=\"secondary\">publish</Icon></IconButton>;\r\n                }\r\n                else{\r\n                    return <IconButton disabled ><Icon color=\"default\">publish</Icon></IconButton>;\r\n                }\r\n            }\r\n        },\r\n    ];\r\n\r\n    const fetchConfigData = async () => {\r\n        try {\r\n            const response1 = await fetch('http://localhost:3001/config');\r\n            const json1 = await response1.json();\r\n            setConfig(json1)\r\n            \r\n        } catch (error) {\r\n            console.log(\"error\", error);\r\n        }\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        const url = \"http://localhost:3001/sqltojs\";\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(url);\r\n                const json = await response.json();\r\n                //console.log(json);\r\n                json.query.sort((a, b) => a.ruleId > b.ruleId ? 1 : -1);\r\n                setRows(json.query);\r\n            } catch (error) {\r\n                console.log(\"error\", error);\r\n            }\r\n        };\r\n        fetchData();\r\n\r\n        fetchConfigData();\r\n        \r\n\r\n      }, []);\r\n\r\n    const sleep = async (milliseconds) => {\r\n        await new Promise(resolve => {\r\n            return setTimeout(resolve, milliseconds)\r\n        });\r\n    };\r\n\r\n    const publishClick = async () => {    \r\n        let rools = rows.filter((r)=>r.publish === 'S')    \r\n        for (let i = 0; i < rools.length; i++) {\r\n            await sleep(i%10 == 0?config.apiInterval:50);          \r\n            if (rools[i].publish === 'S') {                  \r\n                fetch(config.url, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'authorization': `Bearer ` + config.token,\r\n                    'identity': config.identity\r\n                },\r\n                body: JSON.stringify(rools[i])\r\n                })\r\n                .then(res => res.json())\r\n                .then(\r\n                    (result) => {\r\n                        console.log(result)\r\n                        setSuccessAlert(true)\r\n                        setSelectedRule(rools[i].ruleId)\r\n                    })                                  \r\n            }\r\n        }\r\n\r\n    };\r\n\r\nfunction CustomToolbar() {\r\n    return (\r\n      <GridToolbarContainer>\r\n        <GridToolbarColumnsButton />\r\n        <GridToolbarFilterButton />\r\n        <GridToolbarDensitySelector />\r\n        <GridToolbarExport />\r\n        <Button variant=\"text\" size=\"small\" startIcon={<Icon >publish</Icon>} onClick={publishClick} >Publish All</Button>\r\n      </GridToolbarContainer>\r\n    );\r\n  }\r\n\r\n   \r\n    return (\r\n        <div style={{ overflowX: 'hidden' }}>\r\n            <div align=\"left\" style={{ width: \"100%\", paddingBottom: 20 }}>\r\n                <h3>Carrier Edit Rules</h3>\r\n                <hr></hr>\r\n            </div>\r\n            <div style={{ height: 800, padding: 10 }}>\r\n\r\n                <DataGrid\r\n                    rows={rows}\r\n                    sx={{\r\n                        '@media print': {\r\n                          '.MuiDataGrid-main': {\r\n                            width: 'fit-content',\r\n                            fontSize: '10px',\r\n                            height: 'fit-content',\r\n                            overflow: 'visible',\r\n                          },\r\n                          '.MuiDataGrid-cellContent':{\r\n                            width: 'fit-content',\r\n                            fontSize: '10px',\r\n                            height: 'fit-content',\r\n                            overflow: 'visible',\r\n                          },\r\n                          marginBottom: 100,\r\n                        },\r\n                      }}\r\n                    columns={columns}\r\n                    pageSize={10}\r\n                    checkboxSelection\r\n                    disableSelectionOnClick\r\n                    rowsPerPageOptions={[5, 10, 20]}\r\n                    components={{\r\n                        Toolbar: CustomToolbar,\r\n                        GridToolbar: {\r\n                            printOptions:{\r\n                              pageStyle: '.MuiDataGrid-root .MuiDataGrid-main { color: rgba(0, 0, 0, 0.87); }',\r\n                            }\r\n                          },\r\n                      }}\r\n                    initialState={{\r\n                    columns: {\r\n                        columnVisibilityModel: {\r\n                        // Hide columns status and traderName, the other columns will remain visible\r\n                        'insertSql': false,\r\n                        'updateSql': false,\r\n                        },\r\n                    },\r\n                    }}\r\n                />\r\n                <Snackbar \r\n                    open={successAlert} \r\n                    anchorOrigin={{ 'vertical': 'top', 'horizontal': 'right' }}\r\n                    autoHideDuration={6000} \r\n                    onClose={() => {\r\n                            setSuccessAlert(false);\r\n                            }}>\r\n                    <Alert \r\n                        onClose={() => {\r\n                            setSuccessAlert(false);\r\n                            }} \r\n                        severity=\"success\" \r\n                        sx={{ width: '100%' }}>\r\n                    <b>RULE_{ selectedRule }</b> published successfully to TPL Match Next!\r\n                    </Alert>\r\n                </Snackbar>\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n//export default DataTable;","import React, { Component } from \"react\";\r\nimport { Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport ManageRule from \"./manage-rule/ManageRule\";\r\nimport RuleList from \"./rule-list/RuleList\";\r\nimport history from './history';\r\n\r\nexport default class Routes extends Component {\r\n    render() {\r\n        return (\r\n            <Router history={history}>\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={RuleList} />\r\n                    <Route path=\"/LoadRule\" component={ManageRule} />\r\n                </Switch>\r\n            </Router>\r\n        )\r\n    }\r\n}","import './App.css';\nimport React from \"react\";\nimport Routes from './Routes';\n\nfunction App() {  \n  return (\n    <div className=\"App App-canvas\">\n        <Routes />\n            \n    </div>\n  );\n  \n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter as Router } from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n    <Router> \r\n        <App />\r\n    </Router>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}